########### CHECK A20 LINE ########### (FIXME)
_check_A20:
    mov $0xffff, %bx
    mov %bx, %ds
    mov $0x7e0e, %bx
    mov (%bx), %dx
    cmp $0xaa55, %dx
    jne _check_A20_SUCCESS

    shr $8, %bx

    mov (%bx), %dx
    cmp $0xaa55, %dx
    jne _check_A20_SUCCESS
    mov $0, %bx
    ret
_check_A20_SUCCESS:
    mov $1, %ax
    ret

########### DIFFERENT TECHNIQUES TO ENABLE A20 LINE ###########
_enable_A20_BIOS:
    mov $0x2401, %ax
    int $0x15
    ret

_enable_A20_KBC:
    cli
    call _a20wait
    mov $0xAD, %al
    outb %al, $0x64
    call _a20wait
    mov $0xD0, %al
    outb %al, $0x64
    call _a20wait2
    inb $0x60, %al
    push %eax
    call _a20wait
    mov $0xD1, %al
    outb %al, $0x64
    call _a20wait
    pop %eax
    or $2, %al
    outb %al, $0x60
    call _a20wait
    mov $0xAE, %al
    outb %al, $0x64
    call _a20wait
    sti
    ret
_a20wait:
    in $0x64, %al
    test $2, %al
    jnz _a20wait
    ret
_a20wait2:
    inb $0x64, %al
    test $1, %al
    jz _a20wait2
    ret

_enable_A20_FAST_GATE:
    inb $0x92, %al
    or $2, %al
    outb %al, $0x92
    ret

########### ENABLE A20 ###########
_enable_A20:
    call _check_A20
    cmp  $0, %ax
    jne  _enable_A20_EXIT
    call _enable_A20_BIOS
    call _check_A20
    cmp  $0, %ax
    jne  _enable_A20_EXIT
    call _enable_A20_KBC
    call _check_A20
    cmp  $0, %ax
    jne  _enable_A20_EXIT
    call _enable_A20_FAST_GATE
    call _check_A20
    xchg %bx, %bx
    cmp $0, %ax
    jne  _enable_A20_ERROR
_enable_A20_EXIT:
    ret
_enable_A20_ERROR:
    hlt


    init_gdt_segment(0x0, 0x0, 0x0,
                     0x0, 0x0, 0x0,
                     0x0, 0x0, 0x0,
                     0x0, 0x0, 0x0,
                     0x0, &gdt_g[0]);
    /*
     * Kernel code segment
     */
    init_gdt_segment(0xffff, 0x0, 0x0,
                     TYPE_ER, S_CD_DT, R0,
                     0x1, 0xff, 0x0,
                     0x0, DB_32b, 0x1,
                     0x0, &gdt_g[1]);
    /*
     * Kernel data segment
     */
    init_gdt_segment(0xffff, 0x0, 0x0,
                     TYPE_RW, S_CD_DT, R0,
                     0x1, 0xff, 0x0,
                     0x0, DB_32b, 0x1,
                     0x0, &gdt_g[2]);

0x0000000000000000
0x00cf9b000000ffff
0x00cf93000000ffff
